// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String  @id @default(cuid())
  image     String?
  firstName String
  lastName  String?
  email     String  @unique
  password  String
  tags      Tag[]
}

model Animal {
  id                Int            @id @default(autoincrement())
  name              String
  breed             String
  species           String
  expectedSalePrice Float?
  status            Status
  age               Int
  weight            Float
  teeth             Int?
  latestImage       String?
  healthStatus      HealthStatus
  healthRecords     HealthRecord[]
  expenses          Expense[]
  feedSchedules     FeedSchedule[]
  breeding          Breeding?
  comments          String?

  //  Farm-Born Details
  fatherInsemination FatherInsemination?
  parentId           Int? // Foreign key to reference parent animal
  parent             Animal?             @relation("ParentChild", fields: [id], references: [id])
  children           Animal[]            @relation("ParentChild")
  birthType          BirthType?          @default(SINGLE)

  // Purchase Details
  isPurchased   Boolean   @default(false)
  purchaseDate  DateTime?
  purchasePrice Float?
  seller        String?
  middleman     String?
  purchaseImage String?

  sale      Sale?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HealthRecord {
  id          Int       @id @default(autoincrement())
  animalId    Int
  animal      Animal    @relation(fields: [animalId], references: [id])
  date        DateTime
  description String
  treatment   String
  nextCheckup DateTime?
}

model Expense {
  id          Int      @id @default(autoincrement())
  animalId    Int?
  animal      Animal?  @relation(fields: [animalId], references: [id])
  type        Int
  tag         Tag      @relation(fields: [type], references: [id])
  amount      Float
  description String
  date        DateTime @default(now())
}

model FeedSchedule {
  id        Int           @id @default(autoincrement())
  animalId  Int?
  animal    Animal?       @relation(fields: [animalId], references: [id])
  feedType  String
  quantity  Float
  frequency FeedFrequency
  nextFeed  DateTime
}

model Breeding {
  id           Int            @id @default(autoincrement())
  animalId     Int            @unique
  animal       Animal         @relation(fields: [animalId], references: [id])
  breedingDate DateTime
  dueDate      DateTime?
  status       BreedingStatus
}

model Sale {
  id           Int      @id @default(autoincrement())
  animalId     Int      @unique
  animal       Animal   @relation(fields: [animalId], references: [id])
  buyerName    String
  buyerContact String
  saleDate     DateTime @default(now())
  salePrice    Float
}

model Task {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  status      TaskStatus
  dueDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Tag {
  id        Int       @id @default(autoincrement())
  title     String    @unique
  createdBy String
  user      User      @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
  Expense   Expense[]
}

// Enum for task status
enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

// Enum for expense type
enum ExpenseType {
  FEED
  MEDICAL
  MAINTENANCE
  OTHER
}

// Enum for breeding status
enum BreedingStatus {
  PREGNANT
  NOT_PREGNANT
  CALVED
}

// Enum for feed frequency
enum FeedFrequency {
  DAILY
  WEEKLY
  MONTHLY
}

enum HealthStatus {
  HEALTHY
  SICK
  RECOVERING
  INJURED
}

enum BirthType {
  SINGLE // Single birth
  TWIN // Twin birth
  TRIPLE // Triple birth
  OTHER // Any other birth type
}

enum FatherInsemination {
  NATURAL // Natural insemination
  ARTIFICIAL // Artificial insemination
}

enum Status {
  ACTIVE
  SOLD
  DIED
}
